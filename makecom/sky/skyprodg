###########################################################################
#
# File :     makecom/skygcc
#
# Abstract : sky gcc specific compile time options. 
#
#            See
#            o GCC homepage
#               http://www.gnu.org/software/gcc
#            o GCC compilations flags
#               http://www.gnu.org/software/gcc/onlinedocs/gcc_2.html
#
#            This file is included from a generic top level makefile when
#            the Visual C compiler is selected
#
###########################################################################
#
# This file is a product of Criterion Software Ltd.
#
# This file is provided as is with no warranties of any kind and is
# provided without any obligation on Criterion Software Ltd. or Canon Inc. 
# to assist in its use or modification.
#
# Criterion Software Ltd. will not, under any circumstances, be liable for 
# any lost revenue or other damages arising from the use of this file.
#
# Copyright (c) 1999 Criterion Software Ltd.
# All Rights Reserved.
#
# RenderWare is a trademark of Canon Inc.
#
###########################################################################

# Indicate that compiler options have been included
MAKECOM=1

ifeq ($(SMALLCODE), 1)
C_OPT = -Os
else
C_OPT = -O3
endif

# by default, C optimisation is off when a C debug build is used.
ifndef COPTIMIZE
ifeq ($(CDEBUG), 1)
COPTIMIZE = 0
else
COPTIMIZE = 1
endif
endif

ifeq ($(COPTIMIZE), 1)
CFLAGS += $(C_OPT) -DNDEBUG  -Wuninitialized
else
CFLAGS += -O0
#----------------
# # gcc requires the generation of a dependency tree, and hence at least -O1,
# # to detect any use of uninitialized variables
# so build optimised then. Code generation options win.
endif

ifeq ($(CDEBUG), 1)
CFLAGS += -g
endif

ifeq ($(PG), 1)
CFLAGS += -pg -DPG
endif

CFLAGS += -DRW_USE_SPF

ifeq ($(SCE_11),1)
CFLAGS += -DSCE_11
endif

ifeq ($(RWDEBUG), 1)
ifeq ($(RWMEMDEBUG), 1)
RWLIBS += $(RWLIBDIR)/$(LP)rtmemdbg.$(L)
endif # ($(RWMEMDEBUG), 1)
endif # ($(RWDEBUG), 1)

ifdef IOPPATH
CFLAGS += -DIOPPATH=$(IOPPATH)
endif

# These seem to be platform specific, not compiler specific

ifeq ($(NOASM), 1)
CFLAGS += -DNOASM 
endif

ifeq ("$(COMPILER)", "")
COMPILER=cc
endif

ifeq ("$(LINKER)", "")
# It should be this, but we have a rather strange idea of LINKER
LINKER=link.exe
endif

######
# included burst from sony Makefiles
######

SCE         = /usr/local/sce/ee
SCELIBDIR   = $(SCE)/lib
SCEINCDIR   = $(SCE)/include


LCFILE      = $(PS2_DRIVE):$(SCELIBDIR)/ps2.lk

SYSLIBS     = $(PS2_DRIVE):$(SCELIBDIR)/libgraph.a \
              $(PS2_DRIVE):$(SCELIBDIR)/libdma.a \
              $(PS2_DRIVE):$(SCELIBDIR)/libdev.a \
              $(PS2_DRIVE):$(SCELIBDIR)/libpkt.a \
	      $(PS2_DRIVE):$(SCELIBDIR)/libvu0.a

ifndef SCE_11
SYSLIBS += $(PS2_DRIVE):$(SCELIBDIR)/libpad.a
endif
							
CWARNINGS = \
    -Wall \
    -W \
    -Wcast-qual \
    -Wchar-subscripts \
    -Wcomment \
    -Wformat \
    -Wid-clash-32 \
    -Wimplicit \
    -Wimplicit-function-declaration \
    -Wimplicit-int \
    -Winline \
    -Wlong-long \
    -Wmain \
    -Wmissing-noreturn \
    -Wmultichar \
    -Wnested-externs \
    -Wparentheses \
    -Wpointer-arith \
    -Wreturn-type \
    -Wsign-compare \
    -Wswitch \
    -Wtrigraphs \
    -Wunknown-pragmas \
    -Wunused \
    -Wwrite-strings 

#    -ansi
#    -pedantic
#    -Waggregate-return
#    -Wbad-function-cast
#    -Wcast-align
#    -Wconversion
#    -Werror
#    -Wlarger-than-len 
#    -Wmissing-declarations /* sce include files fire these warnings*/
#    -Wmissing-prototypes   /* sce include files fire these warnings*/
#    -Wredundant-decls
#    -Wshadow 
#    -Wstrict-prototypes    /* sce include files fire these warnings */
#    -Wtraditional
#    -Wundef
#    -Wuninitialized

CC        = ee-gcc
CPP       = $(CC)
COUT      = -o
LOUT      = -e
SOUT      = -S -o $@
CPPOPT    = -E -P
CFLAGS   += $(CWARNINGS) -fno-common -c
CFLAGS   += -Wa,-I$(DEVDIR)/$(RWTARGET)
CFLAGS   += -Wa,-al=$*.lst
CFLAGS   += -DSKY 
LD       = ps2link
LFLAGS   = \
	-verbose -c  \
	-l $(PS2_DRIVE):$(SCELIBDIR)  \
	-l $(PS2_DRIVE):$(SCE)/gcc/ee/lib  \
	-l $(PS2_DRIVE):$(SCE)/gcc/lib/gcc-lib/ee/2.9-ee-990721 \
	@$(LCFILE),$(PROJS),$(PROJS).map
LOUT =  -o 

AS        = ee-gcc
AOUT      = -o
ASFLAGS   = -c -xassembler-with-cpp
ASFLAGS  += -Wa,-al=$*.lsa

DVPASM        = ee-dvp-as
DVPASFLAGS    = -I$(SRCDIR) -I$(DEVDIR)/$(RWTARGETcomp)
DVPAOUT       = -o

RUN = dsedb -r run

ifeq ($(CDEBUG), 1)
ASFLAGS     += --gstabs
DVPASMFLAGS += --gstabs
endif

# We do want assembler

CFLAGS += -I$(SCEINCDIR)
CFLAGS += -fno-rtti -fno-exceptions

# Add crtO.o to list of object files

OBJ += crt0.o

VPATH += $(SCELIBDIR)

# Define some compiler/platform specific parameters for the naming of object
# and library files

O = o
L = a
LP = lib
EXE = .elf

# Directory creation
ifndef MD
MD = mkdir -p
endif

# Patch support
ifeq ($(RWPATCH), 1)
RWLIBS +=					\
	$(RWLIBDIR)/$(LP)rppatch.$(L)			\
	$(RWLIBDIR)/$(LP)rtbezpat.$(L)
endif # ($(RWPATCH), 1)

#.SUFFIXES: .c .$(O) .asm .dsm

$(OBJDIR)/%.$(O) : %.dsm
	$(DVPASM) $(DVPASFLAGS) -alhs $(DVPAOUT)$@ $^ > $(OBJDIR)/$*.lsd
CPPFLAGS += $(CFLAGS)

